#---------------------VisitorModel---------------------------
visitor_model.firstName.invalid = Invalid firstName.
visitor_model.lastName.invalid = Invalid lastName.
visitor_model.middleName.invalid = Invalid middleName.
visitor_model.comments.invalid = Invalid comments.
visitor_model.telegramId.invalid = Invalid telegramId.
visitor_model.facebookId.invalid = Invalid facebookId.
visitor_model.linkedinId.invalid = Invalid linkedinId.
visitor_model.twitterId.invalid = Invalid twitterId.
visitor_model.instagramId.invalid = Invalid instagramId.
visitor_model.designation.invalid = Invalid designation.
visitor_model.organizationName.invalid = Invalid organizationName.
visitor_model.organizationAddress.invalid = Invalid organizationAddress.
visitor_model.organizationWebsite.invalid = Invalid organizationWebsite.
visitor_model.addressLine1.invalid = Invalid addressLine1.
visitor_model.addressLine2.invalid = Invalid addressLine2.
visitor_model.phoneCountryCode.invalid = Invalid phoneCountryCode.
visitor_model.phoneNumber.invalid = Invalid phoneNumber.
visitor_model.email.invalid = Invalid email.

#---------------------VisitorModel---------------------------
visit_model.visitorComments.invalid = Invalid visitorComments.
visit_model.requesterNotes.invalid = Invalid requesterNotes.

#---------------------DocumentModel---------------------------
document_model.title.invalid = Invalid title.
document_model.url.invalid = Invalid url.
document_model.note.invalid = Invalid note.

#---------------------VisitTourModel---------------------------
visit_tour.timing.between.visit.timing =  Tour start time and end time must be within the visit start time and end time.

#---------------------DateTimeRangeValidator---------------------------
date_time.equal_or_before = {0}\u2019s {1} must be before or equal to {2}.
date_time.before = {0} must be before {1}.
invalid.datetime.field_name = Invalid field name in date time range annotation.

#---------------------EnumValueValidator---------------------------
invalid.enum.value = Invalid Enum values. Valid values are {0}.


#---------------------UniquePersonnelIdForRoleIdValidator---------------------------
duplicate.personnel_ids.with.role_id = Duplicate personnel id(s) for the same role id found.

#---------------------VisitTourModelValidator---------------------------
exactly_one.location.required = Exactly one {0} location is required.

#---------------------BaseVisitServiceModelValidator---------------------------
location.time.conflict = Location already added on same time.
drop_location.before.pickup_location = Drop Location must be before Pickup Location.
visitLocationModelList.date_time.shoud_be.with_in.service = Location Start time and end time must be within the service\u2019s start time and end time.
visitLocationModelList.date_time.shoud_be.with_in.meeting = Location Start time and end time must be within the meeting\u2019s start time and end time.
visitLocationModelList.date_time.shoud_be.with_in.tour = Location Start time and end time must be within the tour\u2019s start time and end time.
visitLocationModelList.date_time.shoud_be.with_in.tour = Location Start time and end time must be within the tour\u2019s start time and end time.
invalid.service_type = Invalid serviceType.

#---------------------CommonUtils---------------------------
invalid.sort.direction = Valid sort direction are {0}.
invalid.sort.property = Valid properties are {0}.
datetime.range.should_be.between.datetime.range = Start time and end time should be between {0} to {1}.

#---------------------MasterServcie---------------------------
location.with.service_template_id.not.found = Location with Location IDs {0} and with Service Template id {1} not found.

#---------------------PersonnelServcie---------------------------
personnel.with.uucode.not.found = Personnel with {0} not found.
personnel.with.personnel_id.not.found = Personnel with personnel id(s) {0} not found.

#---------------------RoleServcie---------------------------
role.with.uucode.not.found = Role with role {0} not found.
role.with.role_id.not.found = Role with role id {0} not found.
role.with.role_id.and.role_tag.not.found =  Role with role ids {0} not found or Role ids do not have tags {1}.

#---------------------ServiceTemplateServcie---------------------------
service.template.with.service_template_id.and.service.type.not.found =  Service with service template id(s) {0} and with type {1} not found.
service.template.with.service.name.not.found =Service with service template name {0} not found.
service.template.with.service.type.not.found = Service with service type {0} not found.
service_template.invalid_service_template_ids = Invalid Service Template ids : {0}.

#---------------------VisitService---------------------------
visit.with.visit_id.not.found = Visit with visit id {0} not found.
visit.personnel.with.role.not.found = . Visit personnel with role {0} not found.
visitor.with.visitor_id.not.found =  {0} visitor not found with visitor id {1}.
visit.stage.already.exist = . Visit stage {0} is already associated with the visit.
visit.stage.not_update =   The {0} visit stage cannot be changed.
visit.stage.not_update.to =   The visit stage cannot be changed to {0}.
visit.future_date.not.completed = Future date visit cannot be Completed.
visit.date.should_be.same_date.for_checkin = The visit date should be the same as the current date for check-in.
visit.stage.should.be = Visit stage should be {0}.
visit.details.update.restrict = Visit details can update in {0}.
visit.date_time.update.restrict = Visit date & time can not update.
country.with.phone_country_code.not_found = Country with phoneCountryCode : {0} not found.

#---------------------VisitServiceService---------------------------
visit.service.create.restrict = Visit-Service can create in {0}.
visit.service.update.restrict = Visit-Service can update in {0}.
visit.service.delete.restrict = Visit-Service can delete in {0}.
visit.location.not.found = Visit location with id(s) {0} not found.

#---------------------VisitTeamService---------------------------
value.required = {0} is required.
personnel.role.change.restrict = Can not change personnel for role {0}.
personnel.role.add.restrict = Can not add personnel for role {0}.

#---------------------VisitTourService---------------------------
tour.already.exist = Tour already exists in the visit.
visit.tour.not.found =  Tour with visit id {0} not found.

#---------------------VisitTourService---------------------------
tour_template.not.found = Tour Template not found.
visit.tour.not.found =  Tour with visit id {0} not found.
visit.tour.create_or_update.restrict = Visit-Tour can create or update in {0}.

#---------------------VisitPersonnelServcie---------------------------
visit_personnel.with.visitPersonnelId.not.found = Visit personnel with visit personnel id(s) {0} not found.
personnel_id.not.associate.with.multiple.role = Personnel id(s) {0} can not be associated with multiple roles (where 'is check availability' is true).
personnel_id.already.associated.with.visit.or.service =  Personnel id(s) {0} are already associated with the visit or service from {1} to {2}.

#---------------------VisitDocumentServcie---------------------------
document.already.exist.with.title =  Document {0} already exists with the same title.
document.with_title.not.found =  Document with title {0} not found.
visit.document.create.restrict = Visit-Document can create in {0}.
visit.document.delete.restrict = Visit-Document can delete in {0}.

#---------------------VisitTeamService---------------------------
visit.service.with.visit_id.not.found =  Visit service with visit id {0} and visit service id {1} not found.
personnel_id.not.found.team =  Personnel id {0} not found in {1}.
visit.service.already.exist.datetime.range = {0} already exists within the time range.
meeting.personnel.required =  Meeting personnel id is required.
visit.personnel.not.associated.role.tag =  Visit personnel id {0} is not associated with role tag {1}.
allowed.service.type = Service type should be one of {0}.

#---------------------VisitFeedbackServcie---------------------------
feedback.already.exist = Feedback already exist.
personnel.with.personnel_id.not.associated.visit = Personnel with personnel id(s) {0} not associated with visit.
feedback.already.exist.personnel = Feedback already exists from personnel.
visit.feedback.not.found = Visit feedback not found.
visit.external_feedback.create.restrict = Visit feedback can be given in {0}.
visit.internal_feedback.create.restrict = Internal Feedback can create or update in {0} status.
visit.internal_feedback.delete.restrict = Internal Feedback can delete in {0} status.
visit.internal_feedback.with.personnel_id.not.found = Internal feedback with with personnel id : {0} not found.
visit.visit_personnel.is_empty = No personnel exists in visit.

#---------------------CountryService---------------------------
country.with.country_id.not_found = Country with countryId : {0} not found.

#---------------------SiteService---------------------------
site.with.site_uucode.not_found = Site with siteUUCode : {0} not found.

#---------------------VisitInterviewSetupService---------------------------
interview.package.required = Interview Package must not be blank for visit location id {0}.
visit.interview_set_up.create_or_update.restrict = Visit Interview set-update can create or update in {0}.
visit.interview_set_up.delete.restrict = Visit Interview set-update can delete in {0}.

#---------------------TourSlotService---------------------------
tour_slot.available.guest_size.less_than_total_visitor =The number of available guest size is {0}, which is less than the total visitor ({1}).
tour_slot.max_guest_size.should_be.greater_or_equal.total_visitor = Maximum guest number {0} should be greater than or equal to total visitor: {1}.
tour_slot.active_and_visitors.present.stage.change.not.permitted =  Tour slot is in an active state with visitors present. Changing the stage is not permitted.
tour_slot.already.exists.between = Tour slot already exists between {0} to {1}.
tour_slot.stage.is = Tour slot is {0} stage.
tour_slot.interval_should_be.divisible_by =  Tour slot interval should be divisible by {0} minutes.
tour_slot.with_tour_slot_id.not.found = Tour slot with tour slot id: {0} not found.
tour_slot.with_tour_slot_id.not.found.or.not_active_or_partially = Tour slot with tour id : {0} not found or it is inactive or partially active.
tour_slot.past.can_not.update = Past tour slot can not be updated.
tour_slot.stage.not_change = Tour slot stage can not be updated to {0}.
end_date_time.must_be_present_or_future.required = End time must be present or future time.

#---------------------LookService---------------------------
lookup.with.lookup_key.not.found = lookup with lookup key : {0} not found.


#---------------------StateService---------------------------
state.with.state_id.not_found = State with stateId : {0} not found.

#---------------------PreBookedVisitService---------------------------
pre_booked_visit.details.update.restrict = Pre-booked Visit details can update in {0}.

#---------------------AuthService---------------------------
pid.not.found.in.token = The is not found in token.
token.is_required = Token is required.
x_app_public_token_key.is_required = x-app-public-token-key is required.
x_app_public_token_key.invalid = x-app-public-token-key is invalid.
invalid.token = Invalid token.

_is.invalid = {0} is invalid.
something_went_wrong  = {0} must be before {1}.
visit.form.feedback.not_allow = Feedback not allow stages this stage : {0}
visit.not.found = Visit not found.

